import asyncio
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from sqlalchemy.ext.asyncio import AsyncSession
from sqlmodel import select

from app.core.config import settings
from app.database.session import get_db
from app.models.user import User
from app.models.telegram_profile import TelegramProfile
from app.services.logger_service import log_event

bot = Bot(
    token=settings.TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

router = Router()
dp = Dispatcher()
dp.include_router(router)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°—Ç–∞—Ä—Ç—É–µ–º!")]
    ],
    resize_keyboard=True,
    is_persistent=True,
    input_field_placeholder="–ñ–º–∏ –∫–Ω–æ–ø–∫—É ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è"
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
action_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram")]
    ],
    resize_keyboard=True,
    is_persistent=True,
    input_field_placeholder="–í—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞–µ–º"
)

@router.message(CommandStart())
async def start_handler(message: Message):
    async for session in get_db():
        await log_event(
            session=session,
            event_type="start",
            chat_id=message.chat.id,
            payload="/start"
        )
    await message.answer(
        "–ó–¥–∞—Ä–æ–≤–∞, —Å—Ç–∞—Ä–∏–Ω–∞! –ì–æ—Ç–æ–≤ –∫ –¥–µ–ª—É? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–µ—Ö–∞–ª–∏.",
        reply_markup=start_keyboard
    )

@router.message(F.text == "–°—Ç–∞—Ä—Ç—É–µ–º!")
async def show_actions(message: Message):
    await message.answer("–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?", reply_markup=action_keyboard)

@router.message(F.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram")
async def request_login_input(message: Message):
    await message.answer("–ö–∏–¥–∞–π —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

@router.message(F.text.regexp(r"^8\d{10}$|^[a-zA-Z0-9_]+$"))
async def handle_login_input(message: Message):
    login_input = message.text.strip()

    async for session in get_db():
        stmt = select(User).where((User.username == login_input) | (User.phone == login_input))
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if not user:
            await log_event(
                session=session,
                event_type="login_failed",
                chat_id=message.chat.id,
                payload=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login_input} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É –Ω–∞—Å –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        existing = await session.execute(
            select(TelegramProfile).where(TelegramProfile.user_id == user.id)
        )
        if existing.scalar_one_or_none():
            await log_event(
                session=session,
                event_type="already_linked",
                user_id=user.id,
                chat_id=message.chat.id,
                payload="Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω —Ä–∞–Ω–µ–µ"
            )
            await message.answer("–≠—Ç–æ—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á—ë—Ç–∫–µ. –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.")
            return

        profile = TelegramProfile(
            user_id=user.id,
            chat_id=message.chat.id,
            username=message.from_user.username,
            created_at=message.date.replace(tzinfo=None)
        )
        session.add(profile)
        await session.commit()

        await log_event(
            session=session,
            event_type="login_success",
            user_id=user.id,
            chat_id=message.chat.id,
            payload=f"Telegram –ø—Ä–∏–≤—è–∑–∞–Ω –∫–∞–∫ {message.from_user.username}"
        )

    await message.answer("–ö—Ä–∞—Å–∞–≤—á–∏–∫! Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω, –æ–∂–∏–¥–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –∑–∞—è–≤–∫–∞–º!")

@router.message()
async def fallback_handler(message: Message):
    async for session in get_db():
        await log_event(
            session=session,
            event_type="unknown_command",
            chat_id=message.chat.id,
            payload=message.text
        )
    await message.answer("–Ø —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º. –ù–µ –Ω–µ—Å–∏ —Ö—É–π–Ω—é.")

async def main():
    print("ü§ñ Bot started...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())